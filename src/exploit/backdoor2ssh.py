import os
import sys
from colorama import Fore
from paramiko import SSHClient
from paramiko import AutoAddPolicy
from paramiko.ssh_exception import BadHostKeyException, AuthenticationException

moduleDir = os.path.join(os.getcwd(), "/src")
sys.path.insert(0, moduleDir)
from terminal import Terminal

class Backdoor:
    def __init__(self) -> None:
        self.terminal = Terminal()
        
    def initialize(self):
        self.terminal.console("Initialize ssh client...", "info")
        self.clients = SSHClient()
        self.clients.set_missing_host_key_policy(AutoAddPolicy())

    def splitTarget(self, target: str = ""):
        if ":" in target:
            try:
                splits = target.split(":")
                hostname = splits[0]
                port = splits[1]
                if port.isdigit():
                    return hostname, port, True
                else:
                    self.terminal.console("Unknown port", 'error')
            except IndexError:
                self.terminal.console("Format incorrect", "error")
        else:
            self.terminal.console("Format incorrect", "error")
        
        i = self.terminal.question("Back? (Y/n) > ")
        if i.lower() == "y":
            return "", 0, False
        else:
            self.terminal.quit(isUser=True)
    
    def connect(self, hostname: str = "", port: int = 22, username: str = "", password: str = ""):
        try:
            isLogin = self.clients.connect(hostname,port,username,password)
            return True 
        except BadHostKeyException:
            self.terminal.console(f"Cannot connect to {hostname}:{port}", "error")
            return False
        except AuthenticationException:
            self.terminal.console(f"Incorrect username and password", "error")
            return False
        
    def start(self):
        while True:
            self.terminal.clear()
            self.terminal.showLogo()
            target = self.terminal.question("Addres [eg: 192.168.100.1:22] > ")
            username = self.terminal.question("Username > ")
            password = self.terminal.question("Password > ")
            hostname, port, isBack = self.splitTarget(target)
            self.initialize()
            if isBack is False: break
            isConnected = self.connect(hostname, port, username, password)
            if isConnected is True:
                backdoorPath = self.terminal.question("Backdoor path [Select ENTER] > ")
                if backdoorPath == "":
                    pass
            else:
                i = self.terminal.question("Back? (Y/n) > ")
                if i.lower() == "y":
                    return "", 0, False
                else:
                    self.terminal.quit(isUser=True)
def run():
    apps = Backdoor()
    apps.start()